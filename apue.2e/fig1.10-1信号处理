#include "apue.h"
#include <sys/wait.h>

/**
1.9 信号--用于通知进程发生了某种情况
   1.处理
   (1)忽略信号，如硬件异常
   (2)按系统，默认方式，除数为0，系统终止进程
   (3)提供一个函数，信号发生时调用该函数，按预期方式处理
*/
//信号捕捉函数
static void	sig_int(int);		/* our signal-catching function */

int main(void)
{
	char	buf[MAXLINE];	/* from apue.h */
	pid_t	pid;
	int		status;
    //产生SIGINT信号时调用该函数打印消息
	//SIGINT程序终止信号
	if (signal(SIGINT, sig_int) == SIG_ERR)
		err_sys("signal error");

	printf("%% ");	/* print prompt (printf requires %% to print %) */
	while (fgets(buf, MAXLINE, stdin) != NULL) {
		if (buf[strlen(buf) - 1] == '\n')
			buf[strlen(buf) - 1] = 0; /* replace newline with null */

		if ((pid = fork()) < 0) {
			err_sys("fork error");
		} else if (pid == 0) {		/* child */
			execlp(buf, buf, (char *)0);
			err_ret("couldn't execute: %s", buf);
			exit(127);
		}
		/* parent */
		if ((pid = waitpid(pid, &status, 0)) < 0)
			err_sys("waitpid error");
		printf("%% ");
	}
	exit(0);
}

void sig_int(int signo)
{
	printf("interrupt\n%% ");
}
